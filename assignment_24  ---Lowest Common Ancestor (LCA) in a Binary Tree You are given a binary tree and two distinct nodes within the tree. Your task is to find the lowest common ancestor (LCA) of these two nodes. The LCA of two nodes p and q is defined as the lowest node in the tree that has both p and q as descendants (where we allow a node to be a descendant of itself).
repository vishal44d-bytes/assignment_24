#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};

// Function to find LCA of n1 and n2 assuming
// both are present in the BST
Node* lca(Node* root, int n1, int n2) {
  
    if (root == nullptr)
        return nullptr;

    // If both n1 and n2 are smaller than 
    // root, go to left subtree
    if (root->data > n1 && root->data > n2)
        return lca(root->left, n1, n2);

    // If both n1 and n2 are greater than 
    // root, go to right subtree
    if (root->data < n1 && root->data < n2)
        return lca(root->right, n1, n2);

    // If one n1 or n2 is on one side
    // and the other on the other side, 
    // root is the LCA
    return root;
}

int main() {
    // Let us construct the BST
    Node* root = new Node(20);
    root->left = new Node(8);
    root->right = new Node(22);
    root->left->left = new Node(4);
    root->left->right = new Node(12);
    root->left->right->left = new Node(10);
    root->left->right->right = new Node(14);

    // Function calls
    int n1 = 10, n2 = 14;
    Node* t = lca(root, n1, n2);
    cout << "LCA of " << n1 << " and "
      << n2 << " is " << t->data << endl;

    n1 = 14, n2 = 8;
    t = lca(root, n1, n2);
    cout << "LCA of " << n1 << " and "
      << n2 << " is " << t->data << endl;

    n1 = 10, n2 = 22;
    t = lca(root, n1, n2);
    cout << "LCA of " << n1 << " and " 
      << n2 << " is " << t->data << endl;

    return 0;
}
